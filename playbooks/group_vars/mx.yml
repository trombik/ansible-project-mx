---
project_vmail_user: vmail
project_vmail_group: vmail
project_vmail_root_dir: /var/vmail
project_vmail_auth_group: vmailauth
# ____________________________________________________nsd
nsd_flags: ""
nsd_zones: "{{ project_nsd_zones }}"
os_nsd_extra_packages:
  FreeBSD: []
  Debian: ["dnsutils"]
  OpenBSD: []
  RedHat: ["bind-utils"]
nsd_extra_packages: "{{ os_nsd_extra_packages[ansible_os_family] }}"
nsd_extra_groups: []
nsd_config: |
  server:
    server-count: 2
    do-ip4: yes
    do-ip6: no
    verbosity: 1
    username: "{{ nsd_user }}"
    zonesdir: "{{ nsd_zonesdir }}"
    database: ""
    hide-version: yes
    pidfile: "{{ nsd_pid_file }}"
  remote-control:
    {% if ansible_os_family == 'OpenBSD' %}
    control-enable: yes
    {% else %}
    control-enable: no
    {% endif %}
    control-interface: 127.0.0.1
    control-port: 8952
  {% for zone in nsd_zones %}
  zone:
    name: "{{ zone.name }}"
    zonefile: "{{ nsd_config_dir }}/{{ zone.name }}"
    {{ zone.zone_config }}
  {% endfor %}

# ____________________________________________________x509_certificate
nsd_include_x509_certificate: yes
x509_certificate_debug_log: "{{ project_x509_certificate_debug_log }}"
x509_certificate:
  - name: nsd_server
    state: present
    secret:
      path: "{{ nsd_config_dir }}/nsd_server.key"
      owner: "{{ nsd_user }}"
      group: "{{ nsd_group }}"
      mode: "0640"
      key: "{{ project_nsd_server_key }}"
    public:
      path: "{{ nsd_config_dir }}/nsd_server.pem"
      key: "{{ project_nsd_server_pem }}"
  - name: nsd_control
    state: present
    secret:
      path: "{{ nsd_config_dir }}/nsd_control.key"
      owner: "{{ nsd_user }}"
      group: "{{ nsd_group }}"
      mode: "0640"
      key: "{{ project_nsd_control_key }}"
    public:
      path: "{{ nsd_config_dir }}/nsd_control.pem"
      key: "{{ project_nsd_control_pem }}"
  - name: "{{ ansible_fqdn }}"
    state: present
    secret:
      path: "{{ project_mail_key_path }}"
      key: "{{ project_mail_key }}"
    public:
      path: "{{ project_mail_pem_path }}"
      key: "{{ project_mail_pem }}"

# XXX these should be replaced with values with x509_certificate_dir
project_mail_key_path: "/etc/ssl/{{ ansible_fqdn }}.key"
project_mail_pem_path: "/etc/ssl/{{ ansible_fqdn }}.crt"

# ______________________________________________________smtpd
opensmtpd_extra_packages:
  - opensmtpd-extras
opensmtpd_tables:
  - name: passwd
    path: "{{ opensmtpd_conf_dir }}/passwd"
    type: passwd
    owner: root
    group: "{{ project_vmail_auth_group }}"
    mode: "0640"
    no_log: yes
    values: "{{ project_virtual_user_credentials }}"
  - name: domains
    path: "{{ opensmtpd_conf_dir }}/domains"
    type: file
    mode: "0644"
    no_log: no
    values:
      - trombik.org
      - mkrsgh.org
  - name: virtuals
    path: "{{ opensmtpd_conf_dir }}/virtuals"
    type: db
    dbtype: hash
    format: aliases
    owner: root
    group: "{{ opensmtpd_user }}"
    mode: "0640"
    values: "{{ project_virtuals }}"

opensmtpd_flags: -v
opensmtpd_config: |
  {% if project_acme_client_bootstrapped %}
  pki {{ ansible_fqdn }} cert "{{ project_acme_client_cert }}"
  pki {{ ansible_fqdn }} key "{{ project_acme_client_key }}"
  {% else %}
  pki {{ ansible_fqdn }} cert "{{ project_mail_pem_path }}"
  pki {{ ansible_fqdn }} key "{{ project_mail_key_path }}"
  {% endif %}

  {% for table in opensmtpd_tables %}
  table {{ table.name }} {{ table.type }}:{{ table.path }}{% if table['type'] == 'db' %}.db{% endif %}

  {% endfor %}
  {% for address in ansible_all_ipv4_addresses + [ "127.0.0.1" ] %}
  listen on {{ address }} port 25 tls pki {{ ansible_fqdn }}
  listen on {{ address }} port 587 smtps pki {{ ansible_fqdn }} auth <passwd> hostname {{ ansible_fqdn }} received-auth
  {% endfor %}
  action "inbound" lmtp "{{ project_dovecot_unix_socket }}" rcpt-to virtual <virtuals>
  action "outbound" relay
  match from any for domain <domains> action "inbound"
  match auth from any for any action "outbound"

opensmtpd_extra_groups:
  - "{{ project_vmail_auth_group }}"
opensmtpd_virtual_user:
  name: "{{ project_vmail_user }}"
  group: "{{ project_vmail_group }}"
  home: "{{ project_vmail_root_dir }}"
  comment: Virtual Mail User

opensmtpd_include_x509_certificate: yes

# ______________________________________________________dovecot
project_dovecot_unix_socket: /var/dovecot/lmtp
dovecot_extra_groups:
  - vmailauth
dovecot_flags: ""
dovecot_config: |
  protocols = imap lmtp
  listen = *
  base_dir = "{{ dovecot_base_dir }}"
  {% for i in dovecot_config_fragments %}
  {% if i.state == 'present' %}
  !include {{ dovecot_confd_dir }}/{{ i.name }}
  {% endif %}
  {% endfor %}
dovecot_config_fragments:
  - name: logging.conf
    state: present
    content: |
      auth_verbose = yes
      auth_verbose_passwords = no
      auth_debug = no
      auth_debug_passwords = no
  - name: main.conf
    state: present
    content: |
      service imap-login {
        inet_listener imap {
          # disable plain-text IMAP completely
          port = 0
        }
        inet_listener imaps {
          port = 993
        }
      }
      service auth {
        user = {{ dovecot_user }}
        group = {{ project_vmail_auth_group }}
      }
      service auth-worker {
        user = {{ dovecot_user }}
        group = {{ project_vmail_auth_group }}
      }
      service lmtp {
        unix_listener {{ project_dovecot_unix_socket }} {
          user = {{ opensmtpd_virtual_user.name }}
          group = {{ opensmtpd_virtual_user.group }}
          mode = 0600
        }
      }

      mail_location = maildir:{{ opensmtpd_virtual_user.home }}/%d/%n
      mail_privileged_group = {{ project_vmail_auth_group }}
      mmap_disable = yes
      first_valid_uid = 1000
      mail_plugin_dir = /usr/local/lib/dovecot
      mbox_write_locks = fcntl

      namespace inbox {
        inbox = yes
        mailbox Drafts {
          special_use = \Drafts
        }
        mailbox Drafts {
          special_use = \Drafts
        }
        mailbox Junk {
          special_use = \Junk
        }
        mailbox Trash {
          special_use = \Trash
        }
        mailbox Sent {
          special_use = \Sent
        }
        mailbox "Sent Messages" {
          special_use = \Sent
        }
      }
  - name: ssl.conf
    state: present
    content: |
      ssl = required
      {% if project_acme_client_bootstrapped %}
      ssl_cert = <{{ project_acme_client_cert }}
      ssl_key = <{{ project_acme_client_key }}
      {% else %}
      ssl_cert = <{{ project_mail_pem_path }}
      ssl_key = <{{ project_mail_key_path }}
      {% endif %}
      ssl_cipher_list = ALL:!LOW:!SSLv2:!EXP:!aNULL
      verbose_ssl = yes
  - name: auth.conf
    state: present
    content: |
      auth_mechanisms = plain
      disable_plaintext_auth = yes
      passdb {
        args = scheme=blf-crypt {{ opensmtpd_conf_dir }}/passwd
        driver = passwd-file
      }
      userdb {
        args = uid={{ opensmtpd_virtual_user.name }} gid={{ opensmtpd_virtual_user.group }} home={{ project_vmail_root_dir}}/%d/%n
        driver = static
      }
# ______________________________________________________pf

pf_rule: |
  set skip on lo
  set block-policy drop

  table <rfc1918> const { \
    10/8, \
    172.16/12, \
    192.168/16 \
  }

  table <ssh_from> const { \
  {% for from in project_pf_ssh_from %}
    {{ from }}, \
  {% endfor %}
    127.0.0.1
  }

  block log all

  pass inet  proto icmp  all icmp-type echoreq
  pass inet6 proto icmp6 all icmp6-type echoreq
  pass inet  proto udp   from any to any port { bootps, bootpc }

  # ingress
  pass in  proto tcp from { <ssh_from>, <rfc1918> } to self port { ssh }
  pass in  proto tcp from any to self port { smtp, submission, imaps }
  pass in  proto tcp from any to self port { http, https }
  pass in  proto { udp, tcp } from any to self port { domain }

  # egress
  pass out inet  proto icmp  from self to any
  pass out inet6 proto icmp6 from self to any
  pass out       proto tcp   from self to any
  pass out       proto udp   from self to any

# ______________________________________________________monit
monit_config: |
  set daemon 10
    with start delay {{ project_monit_start_delay }}
  set httpd port 2812
    use address 127.0.0.1
    allow 127.0.0.1
  set logfile syslog facility log_daemon

monit_conf_extra_include_directories: []
os_ssh_rc_command:
  OpenBSD:
    start: /usr/sbin/rcctl start sshd
    stop: /usr/sbin/rcctl stop sshd

monit_scripts:
  - name: check_nsd_ns.sh
    content: |
      #!/bin/sh
      /usr/sbin/dig @127.0.0.1 trombik.org ns +short +norec | grep -E 'trombik\.org\.$'

monit_rc:
  sshd:
    state: present
    content: |
      check process sshd with pidfile /var/run/sshd.pid
        start program "/usr/sbin/rcctl start sshd"
        stop program  "/usr/sbin/rcctl stop  sshd"
        every 2 cycles
        if failed port 22 protocol ssh then restart
  nsd:
    state: present
    content: |
      check process nsd with pidfile {{ nsd_pid_file }}
        start program "/usr/sbin/rcctl start nsd"
        stop program  "/usr/sbin/rcctl stop  nsd"
        every 2 cycles

      check program check_nsd_ns with path "{{ monit_script_dir }}/check_nsd_ns.sh"
        if status != 0 for 3 cycles then exec "/usr/sbin/rcctl restart nsd"
  smtpd:
    state: present
    content: |
      check process smtpd matching /usr/sbin/smtpd
        start    program "/usr/sbin/rcctl start   smtpd"
        stop     program "/usr/sbin/rcctl stop    smtpd"
        restart  program "/usr/sbin/rcctl restart smtpd"
        if failed
          port 25 and
          expect "^220.*"
          send   "HELO localhost.localdomain\r\n"
          expect "^250.*"
          send   "QUIT\r\n"
        then restart
  dovecot:
    state: present
    content: |
      check process dovecot matching /usr/local/sbin/dovecot
        start    program "/usr/sbin/rcctl start   dovecot"
        stop     program "/usr/sbin/rcctl stop    dovecot"
        restart  program "/usr/sbin/rcctl restart dovecot"
        if failed host localhost port 993 protocol imaps
        then restart
  httpd:
    state: present
    content: |
      check process httpd matching /usr/sbin/httpd
        start    program "/usr/sbin/rcctl start   httpd"
        stop     program "/usr/sbin/rcctl stop    httpd"
        restart  program "/usr/sbin/rcctl restart httpd"
        if failed host localhost port 80 protocol http status = 403
        then restart

# ______________________________________________________acme_client
#
# XXX after initial bootstarp, run, manually, the following command as root on the host:
#
# acme-client -F trombik.org
#
# after successful run, set project_acme_client_bootstrapped to `yes` and
# provision again.
# project_acme_client_bootstrapped: yes
project_acme_client_domains:
  - trombik.org
  - www.trombik.org
  - mail.trombik.org
  - mx.trombik.org
project_acme_client_cert: /etc/ssl/trombik.org.fullchain.pem
project_acme_client_key: /etc/ssl/private/trombik.org.key
acme_client_flags: "-f {{ acme_client_conf_file }}"
acme_client_domains:
  - trombik.org
acme_client_config: |
  authority letsencrypt {
    api url "https://acme-v02.api.letsencrypt.org/directory"
    account key "/etc/acme/letsencrypt-privkey.pem"
  }

  domain trombik.org {
      alternative names { www.trombik.org mail.trombik.org mx.trombik.org }
      domain key "{{ project_acme_client_key }}"
      domain full chain certificate "{{ project_acme_client_cert }}"
      sign with letsencrypt
  }

acme_client_cron_jobs:
  - name: trombik.org
    cron:
      name: Check cert for trombik.org
      hour: 8

      # XXX use `~` here on OpenBSD 6.7
      minute: 45
      job: "echo acme-client {{ acme_client_flags }} trombik.org"

# ______________________________________________________httpd

httpd_openbsd_config: |
  ext_addr="*"
  prefork 3
  # A minimal default server
  server "default" {
    listen on $ext_addr port 80
  }
  {% if project_acme_client_bootstrapped %}
  {% for server_name in project_acme_client_domains %}
  server "{{ server_name }}" {
    listen on * tls port 443
    root "/htdocs"
    tls {
      certificate "/etc/ssl/trombik.org.fullchain.pem"
      key "/etc/ssl/private/trombik.org.key"
    }
    location "/.well-known/acme-challenge/*" {
      root "/acme"
      request strip 2
    }
  }
  {% endfor %}
  {% else %}
  server "trombik.org" {
    listen on * port 80
    root "/htdocs"
    location "/.well-known/acme-challenge/*" {
      root "/acme"
      request strip 2
    }
  }
  server "www.trombik.org" {
    listen on * port 80
    block return 301 "http://trombik.org$REQUEST_URI"
  }
  server "mail.trombik.org" {
    listen on * port 80
    block return 301 "http://trombik.org$REQUEST_URI"
  }
  server "mx.trombik.org" {
    listen on * port 80
    block return 301 "http://trombik.org$REQUEST_URI"
  }
  {% endif %}
  # Include MIME types instead of the built-in ones
  types {
    include "/usr/share/misc/mime.types"
  }
