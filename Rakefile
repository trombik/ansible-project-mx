# frozen_string_literal: true

# Generated by `infrataster init`

require "English"
require "rake"
require "rspec/core/rake_task"
require "yaml"
require "net/ssh"
require "tempfile"
require "pathname"
require "highline/import"
require "vagrant/serverspec"
require "vagrant/ssh/config"
require "retries"
require "find"
require "open3"
$LOAD_PATH.unshift(Pathname.new(File.dirname(__FILE__)) + "ruby" + "lib")
require "ansibleinventory"

def known_environment
  Dir.glob("inventories/*").select { |d| File.directory?(d) }.map { |d| d.split("/").last }
end

def ansible_environment
  env = ENV["ANSIBLE_ENVIRONMENT"] || "virtualbox"
  raise "unknown environment `#{env}`" unless known_environment.include?(env)

  env
end

def inventory_path
  "inventories/#{ansible_environment}"
end

def sudo_password
  ask("Enter sudo password: ") { |q| q.echo = false }
end

def sudo_password_required?(user)
  user != "root" && user != "vagrant" && user != "ec2-user"
end

def configure_sudo_password_for(user)
  ENV["SUDO_PASSWORD"] = sudo_password if
    sudo_password_required?(user) &&
    !ENV.key?("SUDO_PASSWORD")
end

def run_as_user
  return ENV["ANSIBLE_USER"] if ENV["ANSIBLE_USER"]

  @test_environment.user
end

puts "ANSIBLE_ENVIRONMENT: #{ansible_environment}"
require_relative "inventories/#{ansible_environment}/test_environment"
@test_environment = TestEnvironment.new

desc "launch VMs"
task :up do
  @test_environment.up
end

desc "destroy VMs"
task :clean do
  @test_environment.clean
end

desc "vagrant provision"
task :provision do
  @test_environment.provision
end

desc "perform all tests"
task test: [
  "test:ci",
  :up,
  :provision,
  "test:serverspec:all",
  "test:integration:all"
] do
end

# rubocop:disable Metrics/BlockLength:
namespace :test do
  desc "Provision"
  task :provision do
    @test_environment.provision
  end

  desc "Clean"
  task :clean do
    @test_environment.clean
  end

  namespace "serverspec" do
    desc "Run serverspec on all hosts"
    task "all" do
      inventory = AnsibleInventory.new(inventory_path)
      inventory.all_groups.each do |g|
        next unless Dir.exist?("spec/serverspec/#{g}")

        puts "group: #{g}"
        inventory.all_hosts_in(g).each do |h|
          puts "host: #{h}"

          # XXX pass SUDO_PASSWORD to serverspec if the user is required to
          # type password
          configure_sudo_password_for(run_as_user)
          puts "running serverspec for #{g} on #{h} as user `#{run_as_user}`"
          Vagrant::Serverspec.new(inventory_path).run(group: g, hostname: h)
        end
      end
    end
    groups = Dir.glob("sepc/serverspec/*").select { |d| d != "shared_examples" && File.directory?(d) }
    groups.each do |g|
      next unless Dir.exist?("spec/serverspec/#{g}")

      desc "Run serverspec for group `#{g}`"
      task g.to_sym do |_t|
        inventory.all_hosts_in(g).each do |h|
          configure_sudo_password_for(run_as_user)
          puts "running serverspec for #{g} on #{h} as user `#{run_as_user}`"
          Vagrant::Serverspec.new(inventory_path).run(group: g, hostname: h)
        end
      end
    end
  end

  namespace "integration" do
    user = run_as_user
    directories = Pathname.glob("spec/integration/[0-9][0-9][0-9]_*")
    directories.each do |d|
      desc "run integration spec #{d.basename}"
      task d.basename.to_s do
        vault_password_file = ENV["ANSIBLE_VAULT_PASSWORD_FILE"]
        test_env = ansible_environment
        Bundler.with_clean_env do
          ENV["ANSIBLE_ENVIRONMENT"] = test_env
          ENV["ANSIBLE_VAULT_PASSWORD_FILE"] = vault_password_file
          configure_sudo_password_for(user)
          sh "bundle exec rspec #{d}/*_spec.rb"
        end
      end
    end
    desc "Run integration test"
    task :all do
      # XXX run `bundler exec rspec` in a clean environment.
      # the difference from running `rspec` in bundler environment is that:
      # when invoking `rspec` within `with_clean_env`, the forked process can
      # escape, or shellout, from the bundler environment.
      #
      # `rspec` is a different process. when you invoke `rspec` without
      # `with_clean_env`, the bundler in `rspec` process keeps a copy of
      # original environemnt and replace current environment with the copy when
      # inside of `with_clean_env`. but because, in this case, the copied
      # environment inherits the bundler environment of `rake`, the environment
      # the process replaced is still bundler environment.
      vault_password_file = ENV["ANSIBLE_VAULT_PASSWORD_FILE"]
      test_env = ansible_environment
      user = run_as_user
      Bundler.with_clean_env do
        ENV["ANSIBLE_ENVIRONMENT"] = test_env
        ENV["ANSIBLE_VAULT_PASSWORD_FILE"] = vault_password_file
        configure_sudo_password_for(user)
        sh "bundle exec rspec spec/integration/**/*_spec.rb"
      end
    end
  end

  namespace "ci" do
    task :rubocop do
      sh "rubocop --display-cop-names --display-style-guide --extra-details"
    end

    task :markdownlint do
      sh "node node_modules/markdownlint-cli/markdownlint.js ."
    end

    task :yamllint do
      sh "yamllint -c .yamllint.yml ."
    end

    task "aspell" do
      puts "Running aspell"
      files = []
      Find.find("docs") do |path|
        next if File.directory?(path)

        files << path =~ /^[^.].*\md$/
      end
      files << "README.md"
      files.each do |file|
        content = ""
        File.open(file) do |f|
          content = f.read
        end
        # XXX Ubuntu bionic version is lagged behind (0.60.7-20110707)
        # `--mode markdown` was implemented in 0.60.8. add that option when the
        # package is updated.
        o, e, status = Open3.capture3 "aspell " \
          "--lang en --personal ./.aspell.en.pws list",
                                      stdin_data: content
        raise "failed to run aspell: #{e}" unless status.success?

        next if o.empty?

        o.split("\n").each do |l|
          puts "#{file}: #{l}"
        end
        raise "aspell failed"
      end
    end

    task all: [:rubocop, :markdownlint, :yamllint, :aspell]
  end
  desc "Run tests performed in CI"
  task ci: ["ci:all"]
end
# rubocop:enable Metrics/BlockLength:
